AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Infrastructure for ECS Fargate with High Availability and Auto Scaling

Parameters:
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnetCIDR1:
    Description: CIDR block for first public subnet
    Type: String
    Default: "10.0.1.0/24"

  PublicSubnetCIDR2:
    Description: CIDR block for second public subnet
    Type: String
    Default: "10.0.2.0/24"

  PrivateSubnetCIDR1:
    Description: CIDR block for first private subnet
    Type: String
    Default: "10.0.3.0/24"

  PrivateSubnetCIDR2:
    Description: CIDR block for second private subnet
    Type: String
    Default: "10.0.4.0/24"

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: "t3.micro"

  AwsAccessKeyID:
    Type: String
    NoEcho: true

  AwsSecretAccessKey:
    Type: String
    NoEcho: true

  AwsS3BucketName:
    Type: String
    NoEcho: true

  AwsRegion:
    Type: String
    NoEcho: true

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: ECSFargateVPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ECSFargateIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets in 2 AZs
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: ECSFargatePublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR2
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: ECSFargatePublicSubnet2

  # Private Subnets in 2 AZs
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: ECSFargatePrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR2
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: ECSFargatePrivateSubnet2

  # NAT Gateway
  EIP:
    Type: AWS::EC2::EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: ECSFargateNATGateway

  # Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ECSFargatePublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Route Table for Private Subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ECSFargatePrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  # Associate Subnets with Route Tables
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for ECS Fargate
  ECSFargateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTP and communication between containers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: "0.0.0.0/0"

  # Application Load Balancer (ALB) with Multi-AZ support
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ECSFargateALB
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups:
        - Ref: ECSFargateSG
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Scheme: internet-facing
      Type: application

  # ALB Listener for HTTP
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
            MessageBody: "OK"
            ContentType: text/plain
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ECSFargateCluster

  # ECS Fargate Service with Auto Scaling
  ECSFargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2  # Start with 2 instances (or adjust based on demand)
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Ref: PrivateSubnet1
            - Ref: PrivateSubnet2
          SecurityGroups:
            - Ref: ECSFargateSG
          AssignPublicIp: ENABLED

  # IAM role for Application Auto Scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  # Auto Scaling for ECS Service
  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Join 
        - "/"
        - - "service"
          - !Ref ECSCluster
          - !GetAtt ECSFargateService.Name  # Get the actual service name
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Task Definition for Fargate
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ECSFargateTaskDefinition
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "1024"  # 1 vCPU
      Memory: "2048"  # 2 GB
      ContainerDefinitions:
        - Name: frontend
          Image: "public.ecr.aws/u1k7f1w4/jdkframes-ui:first"
          Memory: 512
          PortMappings:
            - ContainerPort: 80
        - Name: backend
          Image: "public.ecr.aws/u1k7f1w4/jdkframes-api:first"
          Memory: 1024
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: "AwsAccessKeyID"
              Value: !Ref AwsAccessKeyID
            - Name: "AwsSecretAccessKey"
              Value: !Ref AwsSecretAccessKey
            - Name: "AwsRegion"
              Value: !Ref AwsRegion
            - Name: "AwsS3BucketName"
              Value: !Ref AwsS3BucketName

  # IAM Role for ECS Task
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: ECSFargateTaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:GetRepository"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  # PublicSubnetIds:
  #   Description: Public Subnet IDs
  #   Value:
  #     - Ref: PublicSubnet1
  #     - Ref: PublicSubnet2

  # PrivateSubnetIds:
  #   Description: Private Subnet IDs
  #   Value:
  #     - Ref: PrivateSubnet1
  #     - Ref: PrivateSubnet2

  ALBURL:
    Description: URL of the ALB
    Value: !Sub "http://${ALB.DNSName}"
